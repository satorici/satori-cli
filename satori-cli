#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import io
import logging
import mimetypes
import os
import shutil
import sys
import uuid
from pathlib import Path
from zipfile import ZipFile
from urllib.parse import urlencode, quote_plus

import yaml
import requests

from classes.resolver import get_references


class Satori():
    """Have some class"""
    def __init__(self):
        """Turn on the engines"""
        self.verbose = False
        self.config_data = {}
        user_home = Path.home()
        # self.config_path = [f"{user_home}/.satori_credentials.json", ".satori_credentials.json"]
        self.config_path = [f"{user_home}/.satori_credentials.yml", ".satori_credentials.yml"]
        self.host = "https://w7zcm8h3h1.execute-api.us-east-2.amazonaws.com/staging/"  # TODO: api.satori-ci.com
        self.api_host = "https://nuvyp2kffa.execute-api.us-east-2.amazonaws.com/"
        self.headers = {}

    def load_config(self, profile='default', create_profile=False):
        """Load the config file and set the token on the headers"""
        config_file = None
        if os.path.isfile(self.config_path[0]):
            config_file = Path(self.config_path[0])
        elif os.path.isfile(self.config_path[1]):
            config_file = Path(self.config_path[1])
        elif create_profile:
            self.config_data = {profile:{'token':''}}
            return 
        else:
            print("Config file not found")
        if config_file:
            with config_file.open(encoding='utf-8') as f:
                self.config_data = yaml.safe_load(f)
        # Check if user token exist
        token = None
        if 'default' in self.config_data:
            token = self.config_data['default']['token']
        else:
            for first_profile in self.config_data:
                print(f"Warning: default token not found, using profile {profile}")
                token = self.config_data[first_profile]['token']
                break
        if token:
            self.headers = {"Authorization": f"token {token}"}
        else:
            print(f"Set a token with: {sys.argv[0]} config default \"your_user_token\"")
            print("How to get a Satori CI Token: TBC")
            sys.exit(1)

    def save_config(self, profile: str, value: str):
        """Save the token into the config file"""
        if value == "":
            print("Value not defined")
            return False
        self.load_config(profile=profile, create_profile=True)
        if profile:
            self.config_data[profile] = {}
            self.config_data[profile]['token'] = value
            config_yaml = yaml.dump(self.config_data)
            try:
                file = open(self.config_path[0], 'w', 0o700, encoding='utf-8')
            except PermissionError:
                print("Warning: the token file could not be saved in $HOME, using current directory")
                file = open(self.config_path[1], 'w', 0o700, encoding='utf-8')
            file.write(config_yaml)
            file.close()
            print(f'Config token updated for: {profile}')
        return True

    def mime_type(self, playbook):
        """Get mime type"""
        mime_type = None
        file_name = os.path.splitext(playbook)
        if file_name[1] == '.yml':
            mime_type = 'application/x-yaml'
        elif mime_type is None:
            mime_type = mimetypes.guess_type('playbook.zip')[0]
        return mime_type

    def run(self, playbook, profile):
        """Just run"""
        self.load_config(profile=profile)
        if playbook is None:
            print(f"Define the Satori playbook file:\n{sys.argv[0]} run -p playbook.yml")
            return False

        if not os.path.isfile(playbook):
            print(f"Playbook not found: {playbook}")
            return False

        bundle = io.BytesIO()

        try:
            with open(playbook, encoding='utf-8') as f, ZipFile(bundle, "x") as zip_file:
                playbook_dir = os.path.dirname(playbook)
                references = get_references(f.read(), playbook_dir)
                zip_file.write(playbook, "satori.yml")
                for key, paths in references.items():
                    for path in paths:
                        zip_file.write(Path(playbook_dir, path), Path(key, path))
        except Exception as e:
            logging.error(e)
            return False
        playbook = "SatoriBundle.zip"
        headers = {
            "Authorization": f"token {self.config_data[profile]['token']}",
            "Content-Type": "application/zip",
            "X-File-Name": playbook,
        }
        try:
            response = self.connect("POST", f"{self.host}", playbook=playbook, data=bundle.getvalue(), headers=headers)  # TODO: endpoint TBD
        except KeyboardInterrupt:
            sys.exit(0)
        if response.status_code == 200:
            status = response.json()
            print(f"UUID: {status['uuid']} | URL: {status['report_url']}")
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def upload(self, directory, profile):
        """Upload directory and run"""
        temp_file = "plbk-" + str(uuid.uuid4())
        if directory is None:
            print(f"Define the directory with the Satori playbook:\n{sys.argv[0]} run -p ./directory_with_playbook")
            return False

        if os.path.isdir(directory):
            shutil.make_archive(temp_file, 'zip', directory)
            with open(temp_file + '.zip', 'rb') as f:
                data = f.read()
            os.remove(temp_file + '.zip')
        else:
            print(f"Directory not found: {directory}")
            return False

        try:
            response = self.connect("POST", f"{self.host}", playbook=directory, data=data, profile=profile)  # TODO: endpoint TBD
        except KeyboardInterrupt:
            sys.exit(0)
        if response.status_code == 200:
            status = response.json()
            print(f"UUID: {status['uuid']} | URL: {status['report_url']}")
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def connect(self, method, endpoint, playbook=None, data=None, headers=None, profile='default'):
        """Connect to the Satori API"""
        self.load_config(profile=profile)
        if headers is None:
            headers = self.headers
        response = None
        if self.verbose is True:
            print("method:", method, " - endpoint:", endpoint, " - playbook:", playbook, " - headers:", headers)
        if method == "POST":
            try:
                response = requests.post(endpoint, data=data, headers=headers)
            except requests.exceptions.ConnectionError:
                logging.error("Connection could not be open")
            except KeyboardInterrupt:
                sys.exit(0)
        elif method == "GET":
            try:
                response = requests.get(endpoint, headers=headers)
            except requests.exceptions.ConnectionError:
                logging.error("Connection could not be open")
            except KeyboardInterrupt:
                sys.exit(0)
        if response is not None:
            return response
        sys.exit(1)

    def playbooks(self, profile):
        """List playbooks for the user"""
        response = self.connect("GET", f"{self.host}", profile=profile)  # TODO: endpoint TBD

    def stop_report(self, id, profile):
        """Stop the execution of a certain given report"""
        response = self.connect("GET", f"{self.api_host}report/stop/{id}", profile=profile)
        if response.status_code == 200:
            status = response.json()
            print(f"Stopped status: {status['status']}")
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def report_status(self, id, profile):
        """Show the status for a certain given report"""
        response = self.connect("GET", f"{self.api_host}report/status/{id}", profile=profile)
        if response.status_code == 200:
            status = response.json()
            print(f"Status: {status['status']} | Fails: {status['fails']}")
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def cron_action(self, action, param, profile):
        """TBC"""
        response = self.connect("GET", f"{self.api_host}cron/{action}/{param}", profile=profile)
        if response.status_code == 200:
            if action == 'list':
                for cron in response.json():
                    print(f"ID: {cron['ID']} | Name: {cron['display_name']}")
            elif action == 'stop':
                for cron in response.json():
                    print(f"Stopped {cron['ID']}")
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def scan(self, repo_url, coverage, skip_check, from_date, to_date, profile):
        """Run Satori on multiple commits"""
        params = urlencode(
            {'repo': repo_url, 'coverage': coverage, 'skip_check': skip_check,
            'from': from_date, 'to': to_date},
            quote_via=quote_plus)
        response = self.connect("GET", f"{self.api_host}scan/start?{params}", profile=profile)
        if response.status_code == 200:
            info = response.json()
            for key in info:
                print(f"{key.capitalize()}: {info[key]}")
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def clean(self, repo, delete_commits, profile):
        """Remove all reports (and commit information) from a repo"""
        params = urlencode({'repo': repo, 'delete_commits': delete_commits}, quote_via=quote_plus)
        response = self.connect("GET", f"{self.api_host}scan/clean?{params}", profile=profile)
        print(f"{response.status_code = }\n{response.text = }")

    def stop(self, repo, profile):
        """Stop all scans in progress for a certain repo"""
        params = urlencode({'repo': repo}, quote_via=quote_plus)
        response = self.connect("GET", f"{self.api_host}stop?{params}", profile=profile)
        print(f"{response.status_code = }\n{response.text = }")

    def scan_info(self, repo, profile):
        """Get information about the """
        params = urlencode({'repo': repo}, quote_via=quote_plus)
        response = self.connect("GET", f"{self.api_host}info?{params}", profile=profile)
        if response.status_code == 200:
            info = response.json()
            if repo != '':
                for key in info:
                    print(f"{key.capitalize()}: {info[key]}")
            else:
                for repo in info:
                    for key in repo:
                        print(f"{key}: {repo[key]}")
                    print("-"*48)
        else:
            print(f"{response.status_code = }\n{response.text = }")

    def report_info(self, repo, page, limit, filters, profile):
        """Show a list of reports"""
        try:
            if uuid.UUID(repo):
                res = self.connect("GET", f"{self.api_host}report/info/{repo}", profile=profile)
                print(res.text)
                return
        except ValueError:
            pass

        params = urlencode({'repo': repo, 'page': page, 'limit': limit, 'filters': filters}, quote_via=quote_plus)
        response = self.connect("GET", f"{self.api_host}report/info?{params}", profile=profile)
        if response.status_code == 200:
            commits = response.json()
            for commit in commits:
                for key in commit:
                    if key == 'Report':
                        print("▢ Report:")
                        for report_key in commit['Report']:
                            if report_key == 'Satori Error' and commit['Report']['Satori Error'] is not None:
                                print("  • Satori Error:")
                                split_msg = commit['Report']['Satori Error'].split("\n")
                                for msg in split_msg:
                                    print(f"   ░ {msg}")
                            elif report_key == 'Testcases':
                                print("  • Testcases:")
                                for testcase in commit['Report']['Testcases']:
                                    print(f"    ○ {testcase}")
                            else:
                                print(f"  • {report_key}: {commit['Report'][report_key]}")
                    else:
                        print(f"▢ {key}: {commit[key]}")
                print(("_" * 48)+"\n")
            print(f"Current page: {page}")
        else:
            print(f"{response.status_code = }\n{response.text = }")


def main():
    if not (sys.version_info.major == 3 and sys.version_info.minor >= 9):
        print(f"Minimum Python version 3.9 required, the current version is {sys.version_info.major}.{sys.version_info.minor}\nHow To Install Python 3.10 on Ubuntu: https://computingforgeeks.com/how-to-install-python-on-ubuntu-linux-system/")
        sys.exit(0)

    parser = argparse.ArgumentParser(add_help=True, exit_on_error=True)
    sub_parsers = parser.add_subparsers(dest="subcommand")

    # config token "user_token"
    config_cmd = sub_parsers.add_parser("config")
    config_cmd.add_argument("profile", default='default', help="The profile name, uses 'default' by default")
    config_cmd.add_argument("value")

    # run playbook.yml
    run_cmd = sub_parsers.add_parser("run")
    run_cmd.add_argument("playbook")
    run_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # upload ./directory
    upload_cmd = sub_parsers.add_parser("upload")
    upload_cmd.add_argument("directory")
    upload_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # playbooks
    playbooks_cmd = sub_parsers.add_parser("playbooks")
    playbooks_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # stop-report id
    stop_report_cmd = sub_parsers.add_parser("stop-report")
    stop_report_cmd.add_argument("id")
    stop_report_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # status id
    status_cmd = sub_parsers.add_parser("status")
    status_cmd.add_argument("id")
    status_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # cron list|stop <report_uuid>|stopall
    cron_cmd = sub_parsers.add_parser("cron")
    cron_cmd.add_argument("action")
    cron_cmd.add_argument("param", default='all', nargs='?')
    cron_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # scan <repo_url>
    scan_cmd = sub_parsers.add_parser("scan")
    scan_cmd.add_argument("repo_url", help="Github repository")
    scan_cmd.add_argument('-c', '--coverage', dest='coverage', type=float, default=0, help="coverage")
    scan_cmd.add_argument('-s', '--skip-check', dest='skip_check', default=False, action=argparse.BooleanOptionalAction)
    scan_cmd.add_argument('-f', '--from', dest='from_date', type=str, default='', help="From Date")
    scan_cmd.add_argument('-t', '--to', dest='to_date', type=str, default='', help="To Date")
    scan_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # stop <repo_name|repo_url>
    stop_cmd = sub_parsers.add_parser("stop")
    stop_cmd.add_argument("repo", help="Github repository")
    stop_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # info <repo_name|repo_url>
    info_cmd = sub_parsers.add_parser("info")
    info_cmd.add_argument("repo", type=str, help="Github repository")
    info_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The profile you are setting up")

    # clean <repo_name|repo_url>
    clean_cmd = sub_parsers.add_parser("clean")
    clean_cmd.add_argument("repo", help="Github repository")
    clean_cmd.add_argument('-d', '--delete-commits', dest='delete_commits', default=False, action=argparse.BooleanOptionalAction)
    clean_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The credentials profile you are using")

    # report <repo_name|repo_url>
    report_cmd = sub_parsers.add_parser("report")
    report_cmd.add_argument("repo", help="Github repository or report UUID")
    report_cmd.add_argument('-p', '--page', dest='page', type=int, default=1, help="Commit page number")
    report_cmd.add_argument('-l', '--limit', dest='limit', type=int, default=20, help="Page limit number")
    report_cmd.add_argument('-f', '--filter', dest='filter', type=str, default='', help="Filters: from,to,satori_error,status")
    report_cmd.add_argument("--profile", dest='profile', type=str, default='default', help="The profile you are setting up")

    argv_len = len(sys.argv)
    if argv_len <= 1:
        parser.print_help()
        sys.exit(0)
    elif argv_len == 2 and sys.argv[1] == 'info':
        # Add empty string to 'satori-cli info' command
        sys.argv.append('')

    instance = Satori()
    args = parser.parse_args()
    if args.subcommand == "config":
        instance.save_config(args.profile, args.value)
    elif args.subcommand == "run":
        instance.run(args.playbook, args.profile)
    elif args.subcommand == "upload":
        instance.upload(args.directory, args.profile)
    elif args.subcommand == "playbooks":
        instance.playbooks(args.profile)
    elif args.subcommand == "stop-report":
        instance.stop_report(args.id, args.profile)
    elif args.subcommand == "status":
        instance.report_status(args.id, args.profile)
    elif args.subcommand == "cron":
        instance.cron_action(args.action, args.param, args.profile)
    elif args.subcommand == "scan":
        instance.scan(args.repo_url, args.coverage, args.skip_check, args.from_date, args.to_date, args.profile)
    elif args.subcommand == "stop":
        instance.stop(args.repo, args.profile)
    elif args.subcommand == "info":
        instance.scan_info(args.repo, args.profile)
    elif args.subcommand == "clean":
        instance.clean(args.repo, args.delete_commits, args.profile)
    elif args.subcommand == "report":
        instance.report_info(args.repo, args.page, args.limit, args.filter, args.profile)


if __name__ == "__main__":
    main()
