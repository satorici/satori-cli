#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import sys
import requests
import mimetypes
import os
import io
from pathlib import Path
import json
import shutil

class Satori(object):
    """TBC"""
    def __init__(self):
        self.config_data = {}
        self.config_path = "~/.satori.json"
        self.host = "https://w7zcm8h3h1.execute-api.us-east-2.amazonaws.com/staging/" # TODO: api.satori-ci.com
        
    def load_config(self):
        """TBC"""
        config_file = Path(self.config_path)
        try:
            with config_file.open() as f:
                config = f.read()
                self.config_data = json.loads(config)
        except FileNotFoundError:
            print(f"Config file not found: {config_file}")
            return False
        # Check if user token exist
        if 'token' not in self.config_data:
            print(f"Set a token with:\n{sys.argv[0]} config token \"your_user_token\"")
            return False

    def save_config(self, key: str, value: str):
        """TBC"""
        if value == "":
            print("Value not defined")
            return False
        if key in ('token'):  # filter config key
            self.config_data[key] = value
            config_json = json.dumps(self.config_data)
            file = open(self.config_path, 'w')
            file.write(config_json)
            file.close()
            print('Config token updated')
        else:
            print('Unknown config setting')
            return False


    def mime_type(self, playbook):
        """Get mime type"""
        mime_type = None
        file_name = os.path.splitext(playbook)
        if file_name[1] == '.yml':
            mime_type = 'application/x-yaml'
        if mime_type is None:
            mt = mimetypes.guess_type('playbook.zip')
            mime_type = mt[0]
        print(f"{mime_type=}")
        return mime_type
        
    def run(self, playbook):
        """Just run"""
        if playbook is None:
            print(f"Define the Satori playbook file:\n{sys.argv[0]} run -p playbook.yml")
            return False

        if os.path.isfile(playbook):
            print("1")
            with open(playbook, 'rb') as f:
                data = f.read()
        else:
            print(f"Playbook not found: {playbook}")
            return False

        self.connect(endpoint="/run", playbook=playbook, data)

    def upload(self, directory):
        """Upload directory and run"""
        if directory is None:
            print(f"Define the directory with the Satori playbook:\n{sys.argv[0]} run -p ./directory_with_playbook")
            return False
        
        if os.path.isdir(playbook):
            shutil.make_archive('playbook', 'zip', playbook)
            with open('playbook.zip', 'rb') as f:
                data = f.read()
            os.remove('playbook.zip')
        else:
            print(f"Directory not found: {directory}")
            return False

        self.connect(endpoint="/upload", playbook=playbook, data)

    def connect(self, endpoint, playbook=None, data=None):
        """Connect to Satori API"""

        if playbook and data:
            headers = {
                "Authorization": f"token {self.config_data['token']}",
                "Content-Type": self.mime_type(playbook),
                "X-File-Name": os.path.basename(playbook)
            }
            response = requests.post(
                self.host + endpoint,
                data=data,
                headers=headers)
        elif not playbook and not data:
            headers = {
                "Authorization": f"token {self.config_data['token']}",
            }
            response = requests.get(
                self.host + endpoint,
                headers=headers)

        print(f"{response.status_code = }\n{response.text = }")

    def list_playbooks(self):
        """List Satori playbooks"""
        self.connect(endpoint="/list-playbooks", data)


def main():
    instance = Satori()
    instance.load_config()

    parser = argparse.ArgumentParser(add_help=True, exit_on_error=True)

    sub_parsers = parser.add_subparsers(dest="subcommand")

    # config token "user_token"
    config_cmd = sub_parsers.add_parser("config")
    config_cmd.add_argument("key")
    config_cmd.add_argument("value")

    # run playbook.yml
    run_cmd = sub_parsers.add_parser("run")
    run_cmd.add_argument("playbook")

    # upload ./directory
    upload_cmd = sub_parsers.add_parser("run")
    upload_cmd.add_argument("directory")

    # list-playbooks
    list_cmd = sub_parsers.add_parser("list")

    args = parser.parse_args()

    if len(sys.argv) <= 1:
        parser.print_help()
        sys.exit(0)

    if args.subcommand == "config":
        instance.save_config(args.key, args.value)
    elif args.subcommand == "run":
        instance.run(args.playbook)
    elif args.subcommand == "upload":
        instance.upload(args.directory)
    elif args.subcommand == "list-playbooks":
        instance.list_playbooks()

if __name__ == "__main__":
    main()
