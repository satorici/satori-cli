settings:
  name: "Satori CLI Tests"
  log: slack

import:
  - "satori://code/semgrep-secrets.yml"

positive:
  assertReturnCode: 0
  assertStderrNotContains: Traceback
  install:
    update:
    - [ apt update ] 
    git:
    - [ apt install -y git ]
    satori-cli:
    - [ pip install . ]

  create_profile:
    assertStdoutContains: "Token saved"
    test:
    - [ satori-cli config token "not_a_token" -p test_user ]

  set_token:
    assertStdoutContains: "Token saved"
    test:
    - [ satori-cli config token "$(TOKEN)" ]

  dashboard:
    test:
    - [ satori-cli ]

  run:
    pass_report:
      - [ satori-cli run .satori/import/pass.yml --report ]

    import_sync:
      - [ satori-cli run .satori/import --sync ]

    url_output:
      - [ "satori-cli run satori://web/testssl.yml --data=\"{'URL':'https://www.satori-ci.com'}\" --output" ]
      
    input:
    - [ satori-cli run .satori/input.yml --sync ]

  report:
    assertReturnCode: 0

    new_sync:
    - [ "satori-cli run .satori/import/pass.yml -s | grep 'Report ID' | egrep 'r[a-zA-Z0-9]{15}' -o >> report_id.txt" ]

    echo_ID:
    - [ "export ID=$(cat report_id.txt); echo $ID" ]

    list:
    - [ satori-cli report ]
      
    single:
    - [ "export ID=$(cat report_id.txt); satori-cli report $ID --debug" ]

    output:
    - [ "export ID=$(cat report_id.txt); satori-cli report $ID output" ]

    delete:
    - [ "export ID=$(cat report_id.txt); satori-cli report $ID delete" ]

    new_async: # new report for stop is needed because the first one is already stopped
    - [ "satori-cli run .satori/import/pass.yml | grep 'Report ID' | egrep 'r[a-zA-Z0-9]{15}' -o >> report_id2.txt" ]

    stop: # wait until start
    - [ "sleep 10; export ID=$(cat report_id2.txt); satori-cli report $ID stop" ]

  playbook:
    list:
    - [ satori-cli playbook ]

    list_public:
    - [ satori-cli playbook --public ]

    echo:
    - [ "export ID=$(cat report_id2.txt); echo $ID" ]

    single:
    - [ "export ID=$(cat report_id2.txt); satori-cli playbook $ID" ]

    delete:
    - [ "export ID=$(cat report_id2.txt); satori-cli playbook $ID delete" ]

  repo:
    list:
    - [ satori-cli repo ]

    single:
    - [ satori-cli repo satorici/hello_world ]

    run:
    - [ satori-cli repo satorici/hello_world run ]
  # TODO: needs sync mode
  # check_commits: 
  #   test:
  #   - [ satori-cli repo satorici/hello_world check_commits ]

  # commits:
  #   test:
  #   - [ satori-cli repo satorici/hello_world commits ]

  # check_forks:
  #   test:
  #   - [ satori-cli repo satorici/hello_world check_forks ]

  # scan:
  #   test:
  #   - [ satori-cli repo satorici/hello_world scan ]

  # scan_stop:
  #   test:
  #   - [ satori-cli repo satorici/hello_world scan-stop ]

  # clean: # needs sync mode
  #   test:
  #   - [ satori-cli repo satorici/hello_world clean ]

  # delete-commits: # needs sync mode
  #   test:
  #   - [ satori-cli repo satorici/hello_world clean --delete-commits ]

  # currently not being tested:
  # 133     repo_cmd.add_argument("-c", "--coverage", type=float, default=1, help="coverage")
  # 134     repo_cmd.add_argument("--skip-check", default=False, action="store_true")
  
  monitor:
    assertReturnCode: 0
    list:
      test:
      - [ satori-cli monitor ]

    new:
    - ["satori-cli run .satori/monitor.yml -s | grep 'Monitor ID' | egrep 'm[a-zA-Z0-9]{15}' -o >> monitor_id.txt"]

    echo:
    - [ export ID=$(cat monitor_id.txt); echo $ID ]

    - [ ]

    single: # wait until start
    - [ "sleep 10; export ID=$(cat monitor_id.txt); satori-cli monitor $ID ]

    start:
    - [ export ID=$(cat monitor_id.txt); satori-cli monitor $ID start ]

    stop:
    - [ export ID=$(cat monitor_id.txt); satori-cli monitor $ID stop ]

    delete:
    - [ export ID=$(cat monitor_id.txt); satori-cli monitor $ID delete ]

  teams:
    assertReturnCode: 0
    list:
    - [ satori-cli team ]

    clean:
    - [ satori-cli team test_team delete || true ]

    create:
    - [ satori-cli team test_team create ]

    single:
    - [ satori-cli team test_team ]

    members:
    - [ satori-cli team test_team members ]

    add_member:
    - [ satori-cli team test_team add_member --email="test@satori-ci.com" ]

    del_member:
    - [ satori-cli team test_team del_member --email="user@satori-ci.com" ]
      
    team_without_repos:
    - [ satori-cli team test_team repos ]

    add_repo:
    - [ satori-cli team test_team add_repo --repo="satorici/hello_world" ]

    team_with_repos:
    - [ satori-cli team test_team repos ]
    
    delete:
    - [ satori-cli team test_team delete ]

negative:
  assertReturnCode: 1
  assertStderrNotContains: Traceback

  run:
    fail:
    - [ satori-cli run .satori/fail.yml --report ]

    empty_playbook:
    - [ satori-cli run .satori/empty.yml --report ]

    empty_directory:
    - [ mkdir test; cd test; satori-cli run ./ ]

